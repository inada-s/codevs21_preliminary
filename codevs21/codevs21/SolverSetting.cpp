#include "SolverSetting.h"
#include "Logger.h"
#include <string>
#include <iostream>
#include <fstream>
using namespace std;

SolverSetting::SolverSetting(){
  CHARGE_END_FIRE_COUNT = 120;//125;
  BOMB_END_ERASE_COUNT = 120;

  //CHARGE AI
  WIDTH_CHARGE_SEARCH = 60; // 100
  DEPTH_CHARGE_SEARCH = 200;
  RATIO_CHARGE_BLOCK_COUNT = 1000000;
  RATIO_CHARGE_STEP_DELTA_FIRE_COUNT = 100000000;
  RATIO_CHARGE_FINISH_BLOCK_COUNT = 1;
  RATIO_CHARGE_FINISH_DELTA_FIRE_COUNT = 10000000;

  //BOMB AI
  WIDTH_BOMB_SEARCH = 50; //500
  DEPTH_BOMB_SEARCH = 20;

  RATIO_BOMB_BLOCK_COUNT = 1000;
  RATIO_BOMB_CHECKSTEP_BLOCK_COUNT = 1;
  RATIO_BOMB_CHECKSTEP_MAX_ERASE_COUNT = 0;
  RATIO_BOMB_CHECKSTEP_MAX_LAST_ERASE_COUNT = 100;
  RATIO_BOMB_CHECKSTEP_MAX_RAW_SCORE = 0;

  RATIO_BOMB_FINISH_BLOCK_COUNT = 0;
  RATIO_BOMB_FINISH_ERASE_COUNT = 1;
  RATIO_BOMB_FINISH_LAST_ERASE_COUNT = 0;
  RATIO_BOMB_FINISH_RAW_SCORE = 0;

  WIDTH_CHAIN_SEARCH = 50; //500
  DEPTH_CHAIN_SEARCH = 25;

  CHAIN_RETRY_COUNT = 1;
}

void SolverSetting::loadSetting(string file){
  ifstream ifs(file); 
  string key;
  long long value;
  while(ifs >> key >> value){
    if(key == "CHARGE_END_FIRE_COUNT") CHARGE_END_FIRE_COUNT = value;
    if(key == "WIDTH_CHARGE_SEARCH") WIDTH_CHARGE_SEARCH = value;
    if(key == "DEPTH_CHARGE_SEARCH") DEPTH_CHARGE_SEARCH = value;
    if(key == "RATIO_CHARGE_BLOCK_COUNT") RATIO_CHARGE_BLOCK_COUNT = value;
    if(key == "RATIO_CHARGE_FINISH_BLOCK_COUNT") RATIO_CHARGE_FINISH_BLOCK_COUNT = value;
    if(key == "RATIO_CHARGE_FINISH_DELTA_FIRE_COUNT") RATIO_CHARGE_FINISH_DELTA_FIRE_COUNT = value;
    if(key == "WIDTH_BOMB_SEARCH") WIDTH_BOMB_SEARCH = value;
    if(key == "DEPTH_BOMB_SEARCH") DEPTH_BOMB_SEARCH = value;
    if(key == "RATIO_BOMB_BLOCK_COUNT") RATIO_BOMB_BLOCK_COUNT = value;
    if(key == "RATIO_BOMB_CHECKSTEP_BLOCK_COUNT") RATIO_BOMB_CHECKSTEP_BLOCK_COUNT = value;
    if(key == "RATIO_BOMB_CHECKSTEP_MAX_ERASE_COUNT") RATIO_BOMB_CHECKSTEP_MAX_ERASE_COUNT = value;
    if(key == "RATIO_BOMB_CHECKSTEP_MAX_LAST_ERASE_COUNT") RATIO_BOMB_CHECKSTEP_MAX_LAST_ERASE_COUNT = value;
    if(key == "RATIO_BOMB_CHECKSTEP_MAX_RAW_SCORE") RATIO_BOMB_CHECKSTEP_MAX_RAW_SCORE = value;
    if(key == "RATIO_BOMB_FINISH_BLOCK_COUNT") RATIO_BOMB_FINISH_BLOCK_COUNT = value;
    if(key == "RATIO_BOMB_FINISH_ERASE_COUNT") RATIO_BOMB_FINISH_ERASE_COUNT = value;
    if(key == "RATIO_BOMB_FINISH_LAST_ERASE_COUNT") RATIO_BOMB_FINISH_LAST_ERASE_COUNT = value;
    if(key == "RATIO_BOMB_FINISH_RAW_SCORE") RATIO_BOMB_FINISH_RAW_SCORE = value;
 }

  return;
}

void SolverSetting::debugPrint(){
  DOUT << "========== Solver Setting Parameter ==========" << endl;
  DEBUG(CHARGE_END_FIRE_COUNT);
  DEBUG(WIDTH_CHARGE_SEARCH);
  DEBUG(DEPTH_CHARGE_SEARCH);
  DEBUG(RATIO_CHARGE_BLOCK_COUNT);
  DEBUG(RATIO_CHARGE_STEP_DELTA_FIRE_COUNT);
  DEBUG(RATIO_CHARGE_FINISH_BLOCK_COUNT);
  DEBUG(RATIO_CHARGE_FINISH_DELTA_FIRE_COUNT);
  DEBUG(WIDTH_BOMB_SEARCH);
  DEBUG(DEPTH_BOMB_SEARCH);
  DEBUG(RATIO_BOMB_BLOCK_COUNT);
  DEBUG(RATIO_BOMB_CHECKSTEP_BLOCK_COUNT);
  DEBUG(RATIO_BOMB_CHECKSTEP_MAX_ERASE_COUNT);
  DEBUG(RATIO_BOMB_CHECKSTEP_MAX_LAST_ERASE_COUNT);
  DEBUG(RATIO_BOMB_CHECKSTEP_MAX_RAW_SCORE);
  DEBUG(RATIO_BOMB_FINISH_BLOCK_COUNT);
  DEBUG(RATIO_BOMB_FINISH_ERASE_COUNT);
  DEBUG(RATIO_BOMB_FINISH_LAST_ERASE_COUNT);
  DEBUG(RATIO_BOMB_FINISH_RAW_SCORE);
  DOUT << "==============================================" << endl;
}
